const Lang = imports.lang;
const Applet = imports.ui.applet;
const Clutter = imports.gi.Clutter;
const GLib = imports.gi.GLib;
const St = imports.gi.St;
var ABI=6;
const Main = imports.ui.main;
const MessageTray = imports.ui.messageTray;
const PopupMenu = imports.ui.popupMenu;
const Gettext = imports.gettext.domain('cinnamon-applets');
const _ = Gettext.gettext;
const acerhkWirelessStart = true;
const acerhkBluetoothStart = false;
var wirelessState = 1
var bluetoothState = 0

/**
function Source() {
    this._init.apply(this, arguments);
}

Source.prototype = {
    __proto__: MessageTray.Source.prototype,

    _init: function() {
        MessageTray.Source.prototype._init.call(this, _("AcerHK Control"));

        this._setSummaryIcon(this.createNotificationIcon());
    },

    notify: function(notification) {
        this._private_destroyId = notification.connect('destroy', Lang.bind(this, function(notification) {
            if (this.notification == notification) {
                // the destroyed notification is the last for this source
                this.notification.disconnect(this._private_destroyId);
                this.destroy();
            }
        }));

        MessageTray.Source.prototype.notify.call(this, notification);
    },

            
    createNotificationIcon: function() {
        return new St.Icon({ icon_name: 'acerhk-applet',
                             icon_type: St.IconType.SYMBOLIC,
                             icon_size: this.ICON_SIZE });
    }
}
**/
function MyApplet(orientation, panel_height) {
    this._init(orientation, panel_height);
}

MyApplet.prototype = {
    __proto__: Applet.IconApplet.prototype,

    _init: function(orientation, panel_height) {        
        Applet.IconApplet.prototype._init.call(this, orientation, panel_height);
        
        try {
            
            /**
            //Set Intial State of Wireless and BT
            if (acerhkWirelessStart == true) {
	            GLib.spawn_command_line_async ('echo 1 > /proc/driver/acerhk/wirelessled');
	            this.wirelessState = 1);
	        } else 
	            GLib.spawn_command_line_async ('echo 0 > /proc/driver/acerhk/wirelessled');			            
		        wirelessState = 0;
	        
	        if (acerhkBluetoothStart == true) {
	            GLib.spawn_command_line_async ('echo 1 > /proc/driver/acerhk/blueled');
	            bluetoothState=1;
	        } else 
	            GLib.spawn_command_line_async ('echo 0 > /proc/driver/acerhk/blueled');
		        bluetoothState=0;
            **/
                                            
            this.menuManager = new PopupMenu.PopupMenuManager(this);
            this.menu = new Applet.AppletPopupMenu(this, orientation);
            this.menuManager.addMenu(this.menu);            
            
            //this.set_applet_icon_symbolic_name('acerhk-applet');
            this.set_applet_icon_path('/home/arick/.local/share/cinnamon/applets/acerhk-ctl@mcnielcho.org/');
            this.set_applet_icon_name('acerhk-applet.svg');
            this.set_applet_tooltip(_("Acer Hardware Control"));
                        
            // GLib.spawn_command_line_sync ('pkill -f "^bluetooth-applet$"');
            
            this._wireless = new PopupMenu.PopupSwitchMenuItem(_("Wireless Radio"), false);
            this._wireless.connect('toggled', Lang.bind(this, function() {
                //let current_state = this._applet.killswitch_state;
		        if (acerhkWirelessStart == true) {
		            GLib.spawn_command_line_async('echo 1 > /proc/driver/acerhk/wirelessled');
		            this._wireless.setToggleState(true);
		        } else 
		            GLib.spawn_command_line_async('echo 0 > /proc/driver/acerhk/wirelessled');			            
			        this._wireless.setToggleState(false); 
			        
		        // ?? What does this do??
		        global.logError(this._wireless.state)
            }));

            this._bluetooth = new PopupMenu.PopupSwitchMenuItem(_("Bluetooth Radio"), false);
            this._bluetooth.connect('toggled', Lang.bind(this, function() {
                if (acerhkBluetoothStart == true) {
		            GLib.spawn_command_line_async('echo 1 > /proc/driver/acerhk/blueled');
		            this._bluetooth.setToggleState(true);
		        } else 
		            GLib.spawn_command_line_async('echo 0 > /proc/driver/acerhk/blueled');
			        this._bluetooth.setToggleState(false);
            }));

            // this._updateKillswitch();
            
            this.menu.addMenuItem(this._wireless, 1);
            this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem(), 2);
            this.menu.addMenuItem(this._bluetooth, 3);
            this.menu.addMenuItem(new PopupMenu.PopupSeparatorMenuItem(),4);         
        }
        catch (e) {
            global.logError(e);
        }
    },
    
    on_applet_clicked: function(event) {
        this.menu.toggle();        
    },

};

function main(metadata, orientation, panel_height) {  
    let myApplet = new MyApplet(orientation, panel_height);
    return myApplet;      
}				


//// OLD STUFF
/**
function MyApplet(orientation) {
    this._init(orientation);
}
    
MyApplet.prototype = {
    __proto__: Applet.IconApplet.prototype,
    
    _init: function(orientation) {
        Applet.IconApplet.prototype._init.call(this, orientation);
        
        try {
            this.set_applet_icon_name("acerhk-applet");
            this.set_applet_tooltip(_("Toggles Acer Bluetooth and Wifi hardware."));
        }
        catch (e) {
            global.logError(e);
        }
    },
    
    on_applet_clicked: function(event) {
        GLib.spawn_command_line_async('echo 1 > /proc/driver/acerhk/wirelessled');
    }
};

function main(metadata, orientation) {
    let myApplet = new MyApplet(orientation);
    return myApplet;
}
**/

